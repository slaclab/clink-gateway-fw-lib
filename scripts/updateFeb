#!/usr/bin/env python3
#-----------------------------------------------------------------------------
# This file is part of the 'Camera link gateway'. It is subject to 
# the license terms in the LICENSE.txt file found in the top-level directory 
# of this distribution and at: 
#    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html. 
# No part of the 'Camera link gateway', including this file, may be 
# copied, modified, propagated, or distributed except according to the terms 
# contained in the LICENSE.txt file.
#-----------------------------------------------------------------------------

import pyrogue as pr
import os
import importlib

baseDir = os.path.dirname(os.path.realpath(__file__))

print(f"Basedir = {baseDir}")

# First see if submodule packages are already in the python path
try:
    import surf
    import axi_pcie_core
    import lcls_timing_core
    import l2si_core
    import lcls2_pgp_fw_lib

# Otherwise assume it is relative in a standard development directory structure
except:
    pr.addLibraryPath(baseDir + '/../python')
    pr.addLibraryPath(baseDir + '/../../surf/python')
    pr.addLibraryPath(baseDir + '/../../axi-pcie-core/python')
    pr.addLibraryPath(baseDir + '/../../lcls-timing-core/python')
    pr.addLibraryPath(baseDir + '/../../l2si-core/python')
    pr.addLibraryPath(baseDir + '/../../lcls2-pgp-fw-lib/python')

import sys
import argparse
import time

import rogue.hardware.axi
import rogue.protocols

import axipcie

import lcls2_pgp_fw_lib.shared as shared
import ClinkFeb                as feb

#################################################################

class ClinkPcie(pr.Device):
    def __init__(self, 
                 numLanes = 4, 
                 pgp4     = False, 
                 **kwargs):
        super().__init__(**kwargs)
            
        # PGP Hardware on PCIe 
        self.add(shared.Hsio( 
            offset    = 0x0080_0000,
            numLanes  = numLanes,
            pgp4      = pgp4,
            expand    = True,
        ))
        
        self.add(axipcie.AxiPcieCore(
            offset      = 0x0000_0000,
            numDmaLanes = numLanes,
            expand      = False,
        ))  

#################################################################

class MyRoot(shared.Root):

    def __init__(self,
                 dev         = '/dev/datadev_0',# path to PCIe device
                 pgp4        = False,           # true = PGPv3, false = PGP2b
                 pollEn      = False, 
                 initRead    = True, 
                 numLanes    = 4,                  
                 **kwargs):

        # Check for simulation
        if dev == 'sim':
            kwargs['timeout'] = 100000000
        
        # Pass custom value to parent via super function
        super().__init__(
            dev         = dev, 
            pgp4        = pgp4,
            pollEn      = pollEn, 
            initRead    = initRead, 
            numLanes    = numLanes, 
            **kwargs)
        
        # Create memory interface
        self.memMap = axipcie.createAxiPcieMemMap(dev, 'localhost', 8000)            
            
        # Instantiate the top level Device and pass it the memory map
        self.add(ClinkPcie(
            memBase  = self.memMap,
            numLanes = numLanes,
            pgp4     = pgp4,
            expand   = True,
        ))          
        
        # Create DMA streams
        self.dmaStreams = axipcie.createAxiPcieDmaStreams(dev, {lane:{dest for dest in range(4)} for lane in range(numLanes)}, 'localhost', 8000)          
        
        # Create empty list
        self.RemRxLinkReady = [None for i in range(numLanes)]
        
        # Check if not doing simulation
        if (dev != 'sim'):            
            
            # Create arrays to be filled
            self._srp = [None for lane in range(numLanes)]
            
            # Create the stream interface
            for lane in range(numLanes):
                    
                # SRP
                self._srp[lane] = rogue.protocols.srp.SrpV3()
                self.dmaStreams[lane][0] == self._srp[lane]
                
                # Add pointer to the list
                self.RemRxLinkReady[lane] = self.ClinkPcie.Hsio.PgpMon[lane].RxStatus.RemRxLinkReady if pgp4 else self.ClinkPcie.Hsio.PgpMon[lane].RxRemLinkReady                
                         
                # CameraLink Feb Board
                self.add(feb.ClinkFeb(      
                    name        = (f'ClinkFeb[{lane}]'), 
                    memBase     = self._srp[lane],
                    promLoad    = True,
                    enableDeps  = [self.RemRxLinkReady[lane]], # Only allow access if the PGP link is established
                ))        

#################################################################

if __name__ == "__main__": 

    # Set the argument parser
    parser = argparse.ArgumentParser()

    # Convert str to bool
    argBool = lambda s: s.lower() in ['true', 't', 'yes', '1']

    # Add arguments
    parser.add_argument(
        "--dev", 
        type     = str,
        required = False,
        default  = '/dev/datadev_0',
        help     = "path to device",
    )  

    parser.add_argument(
        "--pgp4", 
        type     = argBool,
        required = False,
        default  = False,
        help     = "true = PGPv3, false = PGP2b",
    ) 

    parser.add_argument(
        "--mcs", 
        type     = str,
        required = True,
        help     = "path to mcs file",
    )

    parser.add_argument(
        "--lane", 
        type     = int,
        required = True,
        help     = "PGP lane index (range from 0 to 3)",
    )  

    # Get the arguments
    args = parser.parse_args()

    #################################################################

    if ('_primary.mcs' in args.mcs) or ('_secondary.mcs' in args.mcs):
        raise ValueError(f'ERROR: --mcs looks like a PCIe image file (not FEB)' ) 

    # Set base
    base = MyRoot(dev=args.dev,pgp4=args.pgp4)

    # Start the system
    base.start()

    # Read all the variables
    base.ReadAll()

    # Create useful pointers
    AxiVersion = base.ClinkFeb[args.lane].AxiVersion
    PROM       = base.ClinkFeb[args.lane].CypressS25Fl

    if (base.RemRxLinkReady[args.lane].get()):
        print ( '###################################################')
        print ( '#                 Old Firmware                    #')
        print ( '###################################################')
        AxiVersion.printStatus()
    else:
        # PGP Link down
        raise ValueError(f'Pgp[lane={args.lane}] is down')

    # Program the FPGA's PROM
    PROM.LoadMcsFile(args.mcs)

    if(PROM._progDone):
        print('\nReloading FPGA firmware from PROM ....')
        AxiVersion.FpgaReload()
        time.sleep(5)
        print('\nReloading FPGA done')

        print ( '###################################################')
        print ( '#                 New Firmware                    #')
        print ( '###################################################')
        AxiVersion.printStatus()
    else:
        print('Failed to program FPGA')

    base.stop()
    exit()
